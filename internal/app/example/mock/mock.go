// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/example/domain/domain.go

// Package mock_example is a generated GoMock package.
package mock_example

import (
	example "app-module/internal/app/example/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetExampleData mocks base method.
func (m *MockUsecase) GetExampleData(id int) (*example.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExampleData", id)
	ret0, _ := ret[0].(*example.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExampleData indicates an expected call of GetExampleData.
func (mr *MockUsecaseMockRecorder) GetExampleData(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExampleData", reflect.TypeOf((*MockUsecase)(nil).GetExampleData), id)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(data *example.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), data)
}

// Delete mocks base method.
func (m *MockRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// GetMany mocks base method.
func (m *MockRepository) GetMany(ids []int) ([]*example.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ids)
	ret0, _ := ret[0].([]*example.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockRepositoryMockRecorder) GetMany(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockRepository)(nil).GetMany), ids)
}

// GetOne mocks base method.
func (m *MockRepository) GetOne(id int) (*example.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", id)
	ret0, _ := ret[0].(*example.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockRepositoryMockRecorder) GetOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockRepository)(nil).GetOne), id)
}

// Update mocks base method.
func (m *MockRepository) Update(data *example.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), data)
}

// MockDelivery is a mock of Delivery interface.
type MockDelivery struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryMockRecorder
}

// MockDeliveryMockRecorder is the mock recorder for MockDelivery.
type MockDeliveryMockRecorder struct {
	mock *MockDelivery
}

// NewMockDelivery creates a new mock instance.
func NewMockDelivery(ctrl *gomock.Controller) *MockDelivery {
	mock := &MockDelivery{ctrl: ctrl}
	mock.recorder = &MockDeliveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelivery) EXPECT() *MockDeliveryMockRecorder {
	return m.recorder
}

// Expose mocks base method.
func (m *MockDelivery) Expose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Expose")
}

// Expose indicates an expected call of Expose.
func (mr *MockDeliveryMockRecorder) Expose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expose", reflect.TypeOf((*MockDelivery)(nil).Expose))
}

// MockSomeApiDelivery is a mock of SomeApiDelivery interface.
type MockSomeApiDelivery struct {
	ctrl     *gomock.Controller
	recorder *MockSomeApiDeliveryMockRecorder
}

// MockSomeApiDeliveryMockRecorder is the mock recorder for MockSomeApiDelivery.
type MockSomeApiDeliveryMockRecorder struct {
	mock *MockSomeApiDelivery
}

// NewMockSomeApiDelivery creates a new mock instance.
func NewMockSomeApiDelivery(ctrl *gomock.Controller) *MockSomeApiDelivery {
	mock := &MockSomeApiDelivery{ctrl: ctrl}
	mock.recorder = &MockSomeApiDeliveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSomeApiDelivery) EXPECT() *MockSomeApiDeliveryMockRecorder {
	return m.recorder
}

// CheckSomeData mocks base method.
func (m *MockSomeApiDelivery) CheckSomeData(param string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSomeData", param)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSomeData indicates an expected call of CheckSomeData.
func (mr *MockSomeApiDeliveryMockRecorder) CheckSomeData(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSomeData", reflect.TypeOf((*MockSomeApiDelivery)(nil).CheckSomeData), param)
}
